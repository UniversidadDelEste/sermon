(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'te' is not defined"
p3
sS'layer'
p4
S'/home/diegocode/web2py/applications/sermon/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport serial\nimport time\nimport sys\n\ndef index():         \n    te = "??"\n    hu = "??"\n    \n    exs = "??"   \n     \n    return dict(tempe=te, hume=hu, extra=exs)\n    pass\n\ndef procesa():\n\tpuerto = \'/dev/ttyACM0\'\n\tbaudios = 115200\n\ttimout = 1\n\tbits_datos = serial.EIGHTBITS # FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS\n\tparidad = serial.PARITY_NONE #PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE\n\tbits_stop = serial.STOPBITS_ONE #STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO\n\n\ttry:\n\t\tser = serial.Serial(puerto, \n\t\t\t\t\t\t\tbaudrate=baudios,\n\t\t\t\t\t\t\ttimeout=0, \n\t\t\t\t\t\t\tbytesize=bits_datos, \n\t\t\t\t\t\t\tparity=paridad, \n\t\t\t\t\t\t\tstopbits = bits_stop)\n\n\t\t#~ ser.reset_input_buffer()\n\t\tbuff = ""\n\t\t\n\t\tresponse.flash="leyendo datos"\n\t\t\n\t\tc = ser.read()\n\t\twhile c != \'\\n\':\n\t\t\t#~ buff = buff + c\n\t\t\tc = ser.read()\n\t\t\t\n\t\tc = ser.read()\n\t\twhile c != \'\\n\':\n\t\t\tbuff = buff + c\n\t\t\tc = ser.read()\n\t\t\n\t\tser.close()\n\n\texcept serial.serialutil.SerialException, mensaje:\n\t\tresponse.flash="error de comunicaciones"\n\t\tbuff = "eee"\n\t\t#~ print mensaje\n\t\t#~ print "No se puede continuar con la ejecuci\xc3\xb3n"\n\t\t#raise SystemExit\n\n\treturn buff,dict(tempe=te, hume=hu, extra=exs)\n\ndef form():\n    form=FORM(TABLE(TR("puerto:",INPUT(_type="text",_name="puerto",requires=IS_NOT_EMPTY())),\n                    TR("velocidad:",INPUT(_type="text",_name="baudrate",requires=IS_EMAIL())),\n                    #~ TR("Admin",INPUT(_type="checkbox",_name="admin")),\n                    #~ TR("Sure?",SELECT(\'yes\',\'no\',_name="sure",requires=IS_IN_SET([\'yes\',\'no\']))),\n                    #~ TR("Profile",TEXTAREA(_name="profile",value="write something here")),\n                    TR("",INPUT(_type="submit",_value="SUBMIT"))))\n    if form.accepts(request,session):\n        response.flash="form accepted"\n    elif form.errors:\n        response.flash="form is invalid"\n    else:\n        response.flash="please fill the form"\n    return dict(form=form,vars=form.vars)\n\ndef data():\n    if not session.m or len(session.m)==10: session.m=[]\n    if request.vars.q: session.m.append(request.vars.q)\n    session.m.sort()\n    return TABLE(*[TR(v) for v in session.m]).xml()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(procesa)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/diegocode/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/diegocode/web2py/applications/sermon/controllers/default.py", line 126, in <module>\n    """\n  File "/home/diegocode/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/diegocode/web2py/applications/sermon/controllers/default.py", line 64, in procesa\n    #~ print "No se puede continuar con la ejecuci\xc3\xb3n"\nNameError: global name \'te\' is not defined\n'
p11
s.